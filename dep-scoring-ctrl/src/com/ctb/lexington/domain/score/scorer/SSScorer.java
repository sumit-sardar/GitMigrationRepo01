package com.ctb.lexington.domain.score.scorer;

import java.io.IOException;
import java.util.Iterator;
import java.util.List;

import com.ctb.lexington.db.data.StsTestResultFactData;
import com.ctb.lexington.db.data.StsTestResultFactDetails;
import com.ctb.lexington.db.data.StudentSubtestScoresData;
import com.ctb.lexington.db.data.StudentSubtestScoresDetails;
import com.ctb.lexington.db.utils.DatabaseHelper;
import com.ctb.lexington.domain.score.event.ScoringStatusEvent;
import com.ctb.lexington.domain.score.event.SubtestDerivedScoreEvent;
import com.ctb.lexington.domain.score.event.SubtestItemCollectionEvent;
import com.ctb.lexington.domain.score.scorer.calculator.ContributingResponseCalculator;
import com.ctb.lexington.domain.score.scorer.calculator.ScoreTypeRawScoreCalculator;
import com.ctb.lexington.domain.score.scorer.calculator.SubtestDerivedScoreCalculator;
import com.ctb.lexington.domain.teststructure.ScoreLookupCode;
import com.ctb.lexington.domain.teststructure.ScoringStatus;
import com.ctb.lexington.exception.CTBSystemException;

/**
 * SSScorer.java
 * 
 * The SSScorer (Scaled Summative) performs subtest raw score-based
 * derived scoring for single-subtest scaled assessments,
 * eg. DoDEA EOC. All other item, objective, and subtest NC and
 * raw scores are generated by the extended STScorer.
 * 
 * @version
 * @author ncohen
 */
public class SSScorer extends STScorer {
	
	/**
	 * Create a new SSScorer, add calculators to obtain
	 * subtest derived scores, and subscribe to their
	 * output event.
	 * 
	 * @throws CTBSystemException
	 * @throws IOException
	 */
    public SSScorer() throws CTBSystemException, IOException {
        super();

        addCalculator(new ContributingResponseCalculator(channel, this));
        addCalculator(new ScoreTypeRawScoreCalculator(channel, this));
        addCalculator(new SubtestDerivedScoreCalculator(channel, this));

        channel.subscribe(this, SubtestDerivedScoreEvent.class);
    }

    /**
     * On subtest start, create a placeholder for that subtest's
     * derived scores in the result holder, based on the item
     * set name (generally = Content Area)
     * 
     * @param event a SubtestItemCollectionEvent, generated for
     * each subtest, holds all the item data for the subtest.
     */
    public void onEvent(final SubtestItemCollectionEvent event) {
        super.onEvent(event);
        final StudentSubtestScoresData subtestScoresData = getResultHolder()
                .getStudentSubtestScoresData();
        final StudentSubtestScoresDetails subtestScoresDetail = subtestScoresData.get(DatabaseHelper.asLong(
                event.getItemSetId()));
        subtestScoresDetail.setItemSetName(event.getItemSetName());
    }

    /**
     * Should receive a SubtestDerivedScoreEvent for each
     * completed subtest. This event contains the scale
     * score obtained for the subtest, which is placed
     * in both the test result fact and student subtest 
     * score components of the result holder.
     * 
     * @param event a SubtestDerivedScoreEvent, generated
     * for each completed subtest, contains the scale score
     * obtained from lookup data for the subtest.
     */
    public void onEvent(SubtestDerivedScoreEvent event) {
        StudentSubtestScoresData subtestScoresData = getResultHolder()
                .getStudentSubtestScoresData();
        StsTestResultFactData factData = getResultHolder().getStsTestResultFactData();
        /*List contentAreaCurriculumDetails = getResultHolder().getCurriculumData()
                .getAllContentAreaCurriculumDetails();
        for (Iterator iter = contentAreaCurriculumDetails.iterator(); iter.hasNext();) {
            CurriculumDetail detail = (CurriculumDetail) iter.next();
            StsTestResultFactDetails factDetails = factData.get(detail.getName());
            if(event.getScaleScore() != null)
            	factDetails.setScaleScore(event.getScaleScore());
        }
        */
        StudentSubtestScoresDetails scoreDetail = subtestScoresData.get(DatabaseHelper.asLong(event.getItemSetId()));
        scoreDetail.setScoreTypeCode(event.getScoreTypeCode());
        if (event.getScaleScore() != null)
        	scoreDetail.setScoreValue(event.getScaleScore());
    }
    
    /**
     * When roster scoring status is determined,
     * per research all scale scores should be null
     * if scoring status is not 'CO'.
     * 
     * @param event a ScoringStatusEvent indicating
     * computed scoring status for the roster.
     */
    public void onEvent(ScoringStatusEvent event) {
        super.onEvent(event);
        String status = event.getStatus().getCode();
    	if(!ScoringStatus.SCORED.getCode().equals(status)) {
		    StsTestResultFactData factData = getResultHolder().getStsTestResultFactData();
		    /* List contentAreaCurriculumDetails = getResultHolder().getCurriculumData().getAllContentAreaCurriculumDetails();
		    for (Iterator iter = contentAreaCurriculumDetails.iterator(); iter.hasNext();) {
		        CurriculumDetail detail = (CurriculumDetail) iter.next();
		        StsTestResultFactDetails factDetails = factData.get(detail.getName());
		        factDetails.setScaleScore(null);   
		    }*/
		    StudentSubtestScoresData subtestScoresData = getResultHolder().getStudentSubtestScoresData();
		    for (Iterator iter = subtestScoresData.iterator(); iter.hasNext();) {
			    StudentSubtestScoresDetails scoreDetail = (StudentSubtestScoresDetails) iter.next();
			    if(ScoreLookupCode.SCALED_SCORE.getCode().equals(scoreDetail.getScoreTypeCode())) {
			    	scoreDetail.setScoreValue(null);
			    }
		    }
    	}
    }
}