package com.ctb.lexington.db;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;


public class ConnectionDecorator implements Connection {

    private Connection connection;
    
    
    public ConnectionDecorator(Connection connection) {
        this.connection = connection;
    }
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        PreparedStatementDecorator preparedStatementDecorator = new PreparedStatementDecorator(connection.prepareStatement(sql));
        ConnectionMonitor.statementPrepared(preparedStatementDecorator);
        return preparedStatementDecorator;
    }

    public void clearWarnings() throws SQLException {
        connection.clearWarnings();
    }
    public void close() throws SQLException {
        connection.close();
    }
    public void commit() throws SQLException {
        connection.commit();
    }
    public Statement createStatement() throws SQLException {
        return connection.createStatement();
    }
    public Statement createStatement(int resultSetType, int resultSetConcurrency)
            throws SQLException {
        return connection.createStatement(resultSetType, resultSetConcurrency);
    }
    public Statement createStatement(int resultSetType,
            int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        return connection.createStatement(resultSetType, resultSetConcurrency,
                resultSetHoldability);
    }
    public boolean equals(Object obj) {
        return connection.equals(obj);
    }
    public boolean getAutoCommit() throws SQLException {
        return connection.getAutoCommit();
    }
    public String getCatalog() throws SQLException {
        return connection.getCatalog();
    }
    public int getHoldability() throws SQLException {
        return connection.getHoldability();
    }
    public DatabaseMetaData getMetaData() throws SQLException {
        return connection.getMetaData();
    }
    public int getTransactionIsolation() throws SQLException {
        return connection.getTransactionIsolation();
    }
    public Map getTypeMap() throws SQLException {
        return connection.getTypeMap();
    }
    public SQLWarning getWarnings() throws SQLException {
        return connection.getWarnings();
    }
    public int hashCode() {
        return connection.hashCode();
    }
    public boolean isClosed() throws SQLException {
        return connection.isClosed();
    }
    public boolean isReadOnly() throws SQLException {
        return connection.isReadOnly();
    }
    public String nativeSQL(String sql) throws SQLException {
        return connection.nativeSQL(sql);
    }
    public CallableStatement prepareCall(String sql) throws SQLException {
        return connection.prepareCall(sql);
    }
    public CallableStatement prepareCall(String sql, int resultSetType,
            int resultSetConcurrency) throws SQLException {
        return connection.prepareCall(sql, resultSetType, resultSetConcurrency);
    }
    public CallableStatement prepareCall(String sql, int resultSetType,
            int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        return connection.prepareCall(sql, resultSetType, resultSetConcurrency,
                resultSetHoldability);
    }
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        return connection.prepareStatement(sql, autoGeneratedKeys);
    }
    public PreparedStatement prepareStatement(String sql, int resultSetType,
            int resultSetConcurrency) throws SQLException {
        return connection.prepareStatement(sql, resultSetType,
                resultSetConcurrency);
    }
    public PreparedStatement prepareStatement(String sql, int resultSetType,
            int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        return connection.prepareStatement(sql, resultSetType,
                resultSetConcurrency, resultSetHoldability);
    }
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
            throws SQLException {
        return connection.prepareStatement(sql, columnIndexes);
    }
    public PreparedStatement prepareStatement(String sql, String[] columnNames)
            throws SQLException {
        return connection.prepareStatement(sql, columnNames);
    }
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        connection.releaseSavepoint(savepoint);
    }
    public void rollback() throws SQLException {
        connection.rollback();
    }
    public void rollback(Savepoint savepoint) throws SQLException {
        connection.rollback(savepoint);
    }
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        connection.setAutoCommit(autoCommit);
    }
    public void setCatalog(String catalog) throws SQLException {
        connection.setCatalog(catalog);
    }
    public void setHoldability(int holdability) throws SQLException {
        connection.setHoldability(holdability);
    }
    public void setReadOnly(boolean readOnly) throws SQLException {
        connection.setReadOnly(readOnly);
    }
    public Savepoint setSavepoint() throws SQLException {
        return connection.setSavepoint();
    }
    public Savepoint setSavepoint(String name) throws SQLException {
        return connection.setSavepoint(name);
    }
    public void setTransactionIsolation(int level) throws SQLException {
        connection.setTransactionIsolation(level);
    }
    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        connection.setTypeMap(map);
    }
    public String toString() {
        return connection.toString();
    }
	@Override
	public Array createArrayOf(String typeName, Object[] elements)
			throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public Blob createBlob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public Clob createClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public NClob createNClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public SQLXML createSQLXML() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public Struct createStruct(String typeName, Object[] attributes)
			throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public Properties getClientInfo() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public String getClientInfo(String name) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public boolean isValid(int timeout) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public void setClientInfo(Properties properties)
			throws SQLClientInfoException {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void setClientInfo(String name, String value)
			throws SQLClientInfoException {
		// TODO Auto-generated method stub
		
	}
//	@Override
//	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
//		// TODO Auto-generated method stub
//		
//	}
	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
}
